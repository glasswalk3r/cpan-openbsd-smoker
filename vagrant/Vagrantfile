# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  # All available boxes for this project:
  #config.vm.box = "arfreitas/openbsd-6.0-cpan-smoker"
  #config.vm.box = "arfreitas/openbsd-6.1-cpan-smoker"
  #config.vm.box = "arfreitas/openbsd-6.2-cpan-smoker"
  config.vm.box = "arfreitas/openbsd-6.3-cpan-smoker"
  config.vm.hostname = "cpan-smoker-openbsd"
  config.vm.synced_folder "/tmp", "/vagrant", disabled: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    # Useful for troubleshooting when true
    vb.gui = false
    # Customize the amount of memory on the VM:
    vb.memory = "1548"
    vb.name = "OpenBSD CPAN Smoker"
    # You may want to hide your network name given by the internal DHCP server.
    # Assuming that the VM has only one NIC
    vb.customize ["modifyvm", :id, "--natdnspassdomain1", "off"]
    # Using the host resolver
    vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
    vb.customize ["modifyvm", :id, "--uartmode1", "disconnected"]
  end

  ################################################################
  # CONFIGURABLE STEPS
  ################################################################
  # You can and must verify values used to configure the environment.
  # Be sure to read the comments as well, as they work as documentation.
  # Before running, remember to copy a "metabase_id.json" file to the
  # subdirectory "metabase" where this Vagrantfile is located
  ################################################################

  # setup the OpenBSD closest mirror you want to use. Use just the base URL,
  # like "http://openbsd.c3sl.ufpr.br". The rest will be guessed by the related script.
  openbsd_mirror="http://openbsd.c3sl.ufpr.br"

  # setups the expected time zone the VM will be running
  timezone="America/Sao_Paulo"

  # cpan_mirror: setup the CPAN closest mirror you want to use. It can be even a
  # one on your local network built with CPAN::Mini and Nginx.
  # This is a "real" external mirror:
  # cpan_mirror="http://mirror.nbtelecom.com.br/CPAN"
  # Below is a local one, using /etc/hosts for name resolution
  cpan_mirror="http://minicpan:8090"
  # set to "true" (as a Ruby string) below if you want to have a minicpan mirror inside the VM
  # since it takes a considerable time to build one, it is set to false by default.
  # If you already have a mirror in your local network, you probably leave this as is.
  use_local_mirror="false"

  # the perlbrew homepage. Shouldn't be necessary to change it
  perlbrew_url="https://install.perlbrew.pl"

  # Users: the names of users you want to execute the smoker
  # This is a Ruby dictionary, containing the user login to be created,
  # followed by the perl version choice to be installed with perlbrew and an array
  # of options to be used by perlbrew. You can modify all those options at will,
  # but remember that the number of CPUs is tied to the number of users
  # running a CPAN smoker (in a relation 1:1).
  # See the perlbrew documentation to get acquainted with the options available.
  users = {
      "goku" => {
          "perl" => "perl-stable",
          "args" => [ "noman", "notest", "thread", "multi", "64int", "64all" ]
      },
      "vegeta" => {
          "perl" => "perl-blead",
          "args" => [ "noman", "notest", "thread", "multi", "64int", "64all" ]
      }
  }

  # reports_from is from which person CPAN reports are being sent, see
  # CPAN::Reporter for details on that.
  reports_from="Alceu Rodrigues de Freitas Junior <arfreitas@cpan.org>"

  # Number of CPUs
  # Please consider that each user that will run the Smoker will use a CPU.
  # That's not entirely true, but a single CPU should be enough for a smoker process
  # If you want more users, add more CPUs.
  # The vagrant user will run metabase-relayd, but this daemon uses very
  # little CPU too (when not attending to requests).
  processors=2

  # cpan_build_dir is something you shouldn't change unless you know what you're doing
  # Here, the path defined is to use a MFS mount point to speed up things
  cpan_build_dir="/mnt/cpan_build_dir"

  # prefs_dir is the same configuration option available to the cpan client
  # Users are going to use the same directory since preference files should be shared
  # between them (you don't want neither smokers halted due bad designed distributions).
  prefs_dir="/var/cpan/smoker/prefs"

  # keyboard encoding, see wsconsctl manpage for details
  keyboard="br"

  # All options from here should be left alone (config.vm.provision)
  require 'yaml'
  perl_config = { "reports_from" => reports_from, "users" => users, "config_script" => "/tmp/config_user.sh" }
  File.open('scripts/config.yaml', 'w') do |file|
      file.write(perl_config.to_yaml)
  end

  internal_yaml="/tmp/config.yaml"

  from_to = [
      ["scripts/config.yaml", "modules/required.txt", "modules/extended_tests.txt", "scripts/config_user.sh",
       "scripts/read_yaml.pl", "scripts/run_user_install.sh", "scripts/install_perl.sh", "metabase/metabase_id.json"],
      [internal_yaml, "/tmp/required.txt", "/tmp/extended_tests.txt", "/tmp/config_user.sh", "/tmp/read_yaml.pl",
       "/tmp/run_user_install.sh", "/tmp/install_perl.sh", "/tmp/metabase_id.json"]
  ]

  from_to[0].length.times { |index| config.vm.provision "file", source: "#{from_to[0][index]}", destination: "#{from_to[1][index]}" }
  from_to[1].each { |item| config.vm.provision "shell", inline: "chmod a+rx #{item}"}
  config.vm.provision "shell", path: "scripts/basic_setup.sh", args: [openbsd_mirror, keyboard, timezone]
  config.vm.provision "shell", path: "scripts/vagrant_user.sh", args: [cpan_mirror, use_local_mirror, prefs_dir], privileged: false
  config.vm.provision "shell", path: "scripts/config_smoker.pl", args: [cpan_mirror, internal_yaml, cpan_build_dir, processors, use_local_mirror, prefs_dir]
  from_to[1].each { |item| config.vm.provision "shell", inline: "rm -f #{item}"}
  config.vm.post_up_message = <<MESSAGE
  Remember to execute the following manual steps after provisioning is finished:
    1 - Configure passwords for the new users with 'passwd'. Change the default password of vagrant user, same thing for root.
    2 - Spend some time validating tests results. Tests will not be submitted automatically, but saved to a local directory before submission.
    This will give you a chance to validate the smoker configuration first.
    3 - Once everything is fine, start the metabase-relayd application with the vagrant user.
    4 - With the new users, start the smoker with the alias 'start_smoker'.
    5 - Submit reports with the script 'send_reports'. Check out it's documentation with 'perldoc send_reports'.
    Skip reports with "unknown" grade until you're sure the errors weren't caused by the smoker itself.
    6 - If some distribution halts the smoker, block it with 'dblock'. Check out it's documentation with 'perldoc dblock'.
MESSAGE
end
