# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "trombik/ansible-openbsd-6.0-amd64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
     vb.memory = "1548"
     vb.name = "OpenBSD6.Smoker"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
  # install bash first, required
  
  ################################
  # CONFIGURABLE STEPS
  # You can and should verify values used to configure the environment
  # Items you want to check:
  # -> openbsd_mirror: setup the OpenBSD closest mirror you want to use. Use just the base URL, 
  # like "http://openbsd.c3sl.ufpr.br". The rest will be guessed by the shell script.
  # -> cpan_mirror: setup the CPAN closest mirror you want to use
  # -> user_1, user_2: the names of users you want to execute the smoker. If you want more, you will have to customize the config_smoker.sh and the VM itself
  # -> perl_1, perl_2: the name of perl to install, as provided by "perlbrew available" command to the respective user
  # Number of CPUs
  # Please consider that each user that will run the Smoker will use a CPU. That's not entirely true, but a single CPU should be enough for a smoker process
  # If you want more users, add more CPUs
  # The vagrant user will run metabase-relayd, but this daemon user very little CPU too (when not executing).
  var openbsd_mirror="http://openbsd.c3sl.ufpr.br"
  var cpan_mirror="http://linorg.usp.br/CPAN"
  var user_1="foo"
  var user_2="bar"
  var perl_1="perl-5.20.3"
  var perl_2="perl-5.24.1"
  var cpan_build_dir="/mnt/cpan_build_dir"
  config.vm.provision "file", source: "bin/config_user.sh", destination: "/tmp/config_user.sh"
  config.vm.provision "shell", inline: "chmod a+rx /tmp/config_user.sh"
  config.vm.provision "shell", path: "scripts/config_smoker.sh", args: [openbsd_mirror, cpan_mirror, user_1, perl_1, user_2, perl_2, cpan_build_dir]
  config.vm.provision "file", source: "metabase/metabase_id.json", destination: "/home/vagrant/.metabase/metabase_id.json"
  config.vm.provision "shell", inline: "chown vagrant.vagrant /home/vagrant/.metabase/metabase_id.json; chmod 400 /home/vagrant/.metabase/metabase_id.json"
end
