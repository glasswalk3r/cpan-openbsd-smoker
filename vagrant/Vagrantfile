# frozen_string_literal: true

# -*- mode: ruby -*-
# vi: set ft=ruby :


################################################################
# CONFIGURABLE STEPS
################################################################
# You can and must verify values used to configure the environment.
# Be sure to read the comments as well, as they work as documentation.
# Before running, remember to copy a "metabase_id.json" file to the
# subdirectory "metabase" where this Vagrantfile is located
################################################################

# The username to associate with the user that will run the CPAN smoker.
# This is required to avoid giving too much privileges with sudo.
cpan_user = 'goku'

# The public SSH key to add to the authorized_key cpan_user SSH configuration.
# Defaults to an SSH key point to your current user OpenSSH standard directory.
cpan_user_pub_key = "#{ENV['HOME']}/.ssh/vagrant.pub"

# setup the OpenBSD closest mirror you want to use. Use just the base URL,
# like "http://openbsd.c3sl.ufpr.br". The rest will be guessed by the related
# script.
openbsd_mirror = 'http://openbsd.c3sl.ufpr.br'

# setups the expected time zone the VM will be running
timezone = 'America/Sao_Paulo'

# cpan_mirror: setup the CPAN closest mirror you want to use. It can be even a
# one on your local network built with CPAN::Mini and Nginx.
# This is a "real" external mirror:
# cpan_mirror="http://mirror.nbtelecom.com.br/CPAN"
# Below is a local one
cpan_mirror = 'http://192.168.1.123:8090'
# set to "true" (as a Ruby string) below if you want to have a minicpan
# mirror inside the VM since it takes a considerable time to build one, it is
# set to "false" by default. If you already have a mirror in your local
# network, you probably leave this as is.
use_local_mirror = 'false'

# reports_from is from which person CPAN reports are being sent, see
# CPAN::Reporter for details on that.
reports_from = '"Alceu Rodrigues de Freitas Junior" <arfreitas@cpan.org>'

# cpan_build_dir is something you shouldn't change unless you know what
# you're doing.
# Here, the path defined is to use a MFS mount point to speed up things
cpan_build_dir = '/mnt/cpan_build_dir'

# prefs_dir is the same configuration option available to the cpan client
# Users are going to use the same directory since preference files should be
# shared between them (you don't want neither smokers halted due bad designed
# distributions).
prefs_dir = '/home/goku/cpan-openbsd-smoker/prefs'

# keyboard encoding, see wsconsctl manpage for details
keyboard = 'br'

################################################################
# END OF CONFIGURABLE STEPS
################################################################

Vagrant.configure('2') do |config|
  config.ssh.shell = 'ksh -l'
  config.vm.box = 'arfreitas/openbsd-7.0-cpan-smoker'
  config.vm.box_check_update = false
  config.vm.hostname = 'cpan-smoker-openbsd'
  config.vm.synced_folder '/tmp', '/vagrant', disabled: true
  # If you're using https://github.com/dotless-de/vagrant-vbguest, uncomment
  # the line below to avoid receiving warnings (OpenBSD doesn't support
  # VirtualBox Guest additions)
  config.vbguest.auto_update = false

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  config.vm.provider 'virtualbox' do |vb|
    # Display the VirtualBox GUI when booting the machine
    # Useful for troubleshooting when true
    vb.gui = false
    # Customize the amount of memory on the VM:
    vb.memory = '2048'
    vb.name = 'OpenBSD CPAN Smoker'
    # You may want to hide your network name given by the internal DHCP server.
    vb.customize ['modifyvm', :id, '--natdnspassdomain1', 'off']
    # Using the host resolver
    vb.customize ['modifyvm', :id, '--natdnshostresolver1', 'on']
    vb.customize ['modifyvm', :id, '--uartmode1', 'disconnected']
    vb.customize ['modifyvm', :id, '--nic1', 'nat', '--nictype1', '82540EM']
    vb.customize ['modifyvm', :id, '--vrde', 'off']
    vb.customize ['modifyvm', :id, '--vram', 1]
  end

  config.vm.define 'single'

  config.vm.provision 'ansible' do |ansible|
    ansible.playbook = 'playbook.yml'
    compatibility_mode = '2.0'
    ansible.host_vars = {
      'single' => {
        'cpan_user' => cpan_user,
        'cpan_mirror' => cpan_mirror,
        'cpan_build_dir' => cpan_build_dir,
        'reports_from' => reports_from,
        'cpan_user_pub_key' => cpan_user_pub_key,
      }
    }
  end

  config.vm.provision 'shell', name: 'Setting keyboard', inline: "/sbin/wsconsctl keyboard.encoding=#{keyboard}"
  config.vm.provision 'shell', name: 'Setting timezone', inline: "/usr/sbin/zic -l #{timezone}"
  config.vm.provision 'shell', name: 'Fine tunning file system', path: 'scripts/fix_fstab.pl', args: ['-b', cpan_build_dir, '-s', '512']
  config.vm.provision 'shell', name: 'Remounting all partitions', inline: 'mount -a'
  # config.vm.provision 'shell', name: 'Upgrading CPAN', path: '/usr/bin/cpan', args: ['CPAN'], privileged: false
  # config.vm.provision 'file', source: 'modules/required.txt', destination: '/tmp/required.txt'
  # config.vm.provision 'shell', name: 'Installing required Perl modules', inline: 'cat /tmp/required.txt | xargs cpan -T', privileged: false
  # config.vm.provision 'shell', name: 'Enabling CPAN::SQLite', inline: "echo 'o conf use_sqlite 1\no conf commit' | cpan", privileged: false
  # config.vm.provision 'file', source: 'modules/extended_tests.txt', destination: '/tmp/extended.txt'
  # config.vm.provision 'shell', name: 'Installing extended Perl modules', inline: 'cat /tmp/extended.txt | xargs cpan -T', privileged: false
  # config.vm.provision 'shell', name: 'Enabling CPAN::Reporter', inline: "echo 'o conf test_report 1\no conf commit' | cpan", privileged: false
  # config.vm.provision 'shell', name: 'Testing extended Perl modules', inline: 'cat /tmp/extended.txt | xargs cpan -t', privileged: false

  config.vm.post_up_message = <<MESSAGE
  Remember to execute the following manual steps after provisioning is finished:
    1 - Configure passwords for the new users with 'passwd'. Change the default
    password of vagrant user, same thing for root.
    2 - Spend some time validating tests results. Tests will not be submitted
    automatically, but saved to a local directory before submission. This will
    give you a chance to validate the smoker configuration first.
    3 - Submit reports with the script 'send_reports'. Check out it's
    documentation with 'perldoc send_reports'.
    Skip reports with "unknown" grade until you're sure the errors weren't
    caused by the smoker itself.
    4 - If some distribution halts the smoker, block it with 'dblock'. Check out
    it's documentation with 'perldoc dblock'.
MESSAGE
end
