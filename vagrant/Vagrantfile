# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # All boxes available for this project:
  #config.vm.box = "arfreitas/openbsd-6.0-cpan-smoker"
  #config.vm.box = "arfreitas/openbsd-6.1-cpan-smoker"
  config.vm.box = "arfreitas/openbsd-6.2-cpan-smoker"
  config.vm.hostname = "cpan-smoker-openbsd"
  config.vm.synced_folder "/tmp", "/vagrant", disabled: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    # Useful for troubleshooting when true
    vb.gui = false
    # Customize the amount of memory on the VM:
    vb.memory = "1548"
    vb.name = "OpenBSD CPAN Smoker"
    # You may want to hide your network name given by the internal DHCP server.
    # Assuming that the VM has only one NIC
    vb.customize ["modifyvm", :id, "--natdnspassdomain1", "off"]
    # Using the host resolver
    vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
  end

  ################################################################
  # CONFIGURABLE STEPS
  ################################################################
  # You can and must verify values used to configure the environment.
  # Be sure to read the comments as well, as they work as documentation.
  # Before running, remember to copy a "metabase_id.json" file to the 
  # subdirectory "metabase" where this Vagrantfile is located
  ################################################################
  
  # setup the OpenBSD closest mirror you want to use. Use just the base URL, 
  # like "http://openbsd.c3sl.ufpr.br". The rest will be guessed by the shell script.
  openbsd_mirror="http://openbsd.c3sl.ufpr.br"
  
  # cpan_mirror: setup the CPAN closest mirror you want to use. It can be even a 
  # one on your local network built with CPAN::Mini and Nginx.
  # cpan_mirror="http://mirror.nbtelecom.com.br/CPAN"
  cpan_mirror="http://minicpan:8090"
  # set to "true" (as a Ruby string) below if you want to have a minicpan mirror inside the VM
  # since it takes a considerable time to build one, it is set to false by default.
  # If you already have a mirror in your local network, you probably leave this as is.
  use_local_mirror="false"
  
  # the perlbrew homepage. Shouldn't be necessary to change it
  perlbrew_url="https://install.perlbrew.pl"
  
  # user_1, user_2: the names of users you want to execute the smoker. If you 
  # want more users, you will have to customize the config_smoker.sh 
  # and the VM itself. You will need to change those users passwords before
  # logging in with SSH (root and vagrant uses "vagrant" password by default).
  user_1="goku"
  user_2="vegeta"
  
  # perl_1, perl_2: the name of perl to install, as provided by 
  # "perlbrew available" command to the respective user
  # "perl-stable" and "perl-blead" are special aliases, see perlbrew documentation
  # for details on them.
  perl_1="perl-stable"
  perl_2="perl-5.27.6"
  
  # reports_from is from which person CPAN reports are being sent, see 
  # CPAN::Reporter for details on that be extra careful about 
  # maintaining the single quotes below, otherwise you might get 
  # trouble with Bash argument parsing
  reports_from="'Alceu Rodrigues de Freitas Junior <arfreitas@cpan.org>'"
  
  # Number of CPUs
  # Please consider that each user that will run the Smoker will use a CPU.
  # That's not entirely true, but a single CPU should be enough for a smoker process
  # If you want more users, add more CPUs.
  # The vagrant user will run metabase-relayd, but this daemon uses very 
  # little CPU too (when not executing).
  processors=2
  
  # cpan_build_dir is something you shouldn't change unless you know what you're doing
  # Here, the path defined is to use a MFS mount point to speed up things
  cpan_build_dir="/mnt/cpan_build_dir"

  # prefs_dir is the same configuration option available to the cpan client
  # Users are going to use the same directory since preference files should be shared
  # between them (you don't want neither smokers halted due bad designed distributions).
  prefs_dir="/var/cpan/smoker/prefs"
  
  # keyboard encoding, see wsconsctl manpage for details
  keyboard="br"
  
  # this should be left alone (config.vm.provision)
  package_dir=File.dirname(__FILE__)
  config.vm.provision "file", source: "scripts/config_user.sh", destination: "/tmp/config_user.sh"
  config.vm.provision "file", source: "scripts/run_user_install.sh", destination: "/tmp/run_user_install.sh"
  config.vm.provision "file", source: "scripts/install_perl.sh", destination: "/tmp/install_perl.sh"
  config.vm.provision "shell", inline: "chmod a+rx /tmp/config_user.sh /tmp/run_user_install.sh /tmp/install_perl.sh"
  config.vm.provision "file", source: "metabase/metabase_id.json", destination: "/tmp/metabase_id.json"
  config.vm.provision "shell", inline: "chmod a+r /tmp/metabase_id.json"
  config.vm.provision "shell", path: "scripts/basic_setup.sh", args: [openbsd_mirror, keyboard]
  config.vm.provision "shell", path: "scripts/vagrant_user.sh", args: [cpan_mirror, use_local_mirror, prefs_dir], privileged: false
  config.vm.provision "shell", path: "scripts/config_smoker.sh", args: [cpan_mirror, user_1, perl_1, user_2, perl_2, cpan_build_dir, processors, reports_from, use_local_mirror, prefs_dir]
  config.vm.provision "shell", inline: "rm -f /tmp/metabase_id.json /tmp/config_user.sh /tmp/run_user_install.sh /tmp/install_perl.sh"
  config.vm.post_up_message = <<MESSAGE
  Remember to execute the following manual steps after provisioning is finished:
    1 - Configure passwords for the new users with 'passwd'. Change the default password of vagrant user, same thing for root.
    2 - Spend some time validating tests results. Tests will not be submitted automatically, but saved to a local directory before submission.
    This will give you a chance to validate the smoker configuration first.
    3 - Once everything is fine, start the metabase-relayd application with the vagrant user.
    4 - With the new users, start the smoker with the alias 'start_smoker'.
    5 - Submit reports with the script 'send_reports'. Check out it's documentation with 'perldoc send_reports'.
    Skip reports with "unknown" grade until you're sure the errors weren't caused by the smoker itself.
    6 - If some distribution halts the smoker, block it with 'dblock'. Check out it's documentation with 'perldoc dblock'.
MESSAGE
end
